# -*- coding: utf-8 -*-
"""Sudoku.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HO04R2guVGanc_35sf3ggMO9KwDD1yfG
"""

import pandas as pd
import numpy as np
import random as rd

def createboard() :
  #Creamos matriz vacia
  matrix = np.zeros((9, 9), dtype=int)

  #Llenamos una diagonal de 3 cajas 3x3
  for i in range(0,9,3) :
    filldiagonal(matrix, i, i)

  #rellenamos el tablero
  solve(matrix)

  #Creamos una copia del tablero correcto
  solved_matrix = matrix.copy()

  #Creamos casillas vacias
  for o in range(40):
    row = rd.randint(0,8)
    col = rd.randint(0,8)
    matrix[row, col] = 0

  return matrix, solved_matrix

#funcion para llenar matriz
def filldiagonal(matrix, row, column) :
  nums = rd.sample(range(1,10), 9)
  for i in range(3) :
    for j in range(3) :
      matrix[row+i, column+j] = nums.pop()


#Comprobacion del numero
def validate(matrix, row, col, num) :
  if num in matrix[row, :] or num in matrix[:, col]:
    return False

  box_row = (row // 3) * 3
  box_col = (col // 3) * 3
  if num in matrix[box_row:box_row+3, box_col:box_col+3]:
    return False
  return True

#resolucion de sudoku
def solve(matrix) :
  for row in range(9) :
    for col in range(9) :
      if matrix[row, col] == 0 :
        for num in range(1,10) :
          if validate(matrix, row, col, num) :
            matrix[row, col] = num
            if solve(matrix) :
              return True
            matrix[row, col] = 0
        return False
  return True

#Imprimimos el tablero vacio
def printboard(matrix) :
  for row in matrix :
    print(" ".join(str(num) if num != 0 else 'â€¢' for num in row))

#inicializacion de juego/main
def play(matrix, solved_matrix) :
  while True :
    try:
      printboard(matrix)
      row = int(input("Ingrese la fila (0-8): "))
      col = int(input("Ingrese la columna (0-8): "))
      num = int(input("Ingrese el numero (1-9): "))

      #Entradas dentro del rango
      if row < 0 or row > 8 or col < 0 or col > 8 or num < 1 or num > 9:
        print("Entrada invalida. Intente de nuevo.")
        continue

      #Casillas ocupadas
      if matrix[row, col] != 0:
        print("Casilla ocupada. Intente de nuevo.")
        continue

      #Validacion de numero
      if not validate(matrix, row, col, num):
        print("Numero invalido. Intente de nuevo.")

      #Verificacion de input
      if solved_matrix[row, col] == num:
        print("Numero correcto.")
        for i in range(9):
          for j in range(9):
            if(num == solved_matrix[i, j]):
              matrix[i, j] = num
      else:
        print("Numero incorrecto. Intente de nuevo.")

      #Comprobacion de tablero completado
      if np.all(matrix != 0):
        print("Tablero completado:")
        printboard(matrix)
        break

    except ValueError:
      print("Entrada invalida. Intente de nuevo.")
      continue
    except TerminateGame:
      print("\nJuego Terminado")

SudokuMatrix, SolvedMatrix = createboard()
play(SudokuMatrix, SolvedMatrix)